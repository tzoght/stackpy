name: publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for current version)'
        required: false
        type: string
  release:
    types: [published]

permissions:
  contents: read

env:
  ################################## REPOSITORY SPECIFIC ##################################
  # Specifies the Python version to be used in the workflow.
  PYTHON_VERSION: "3.12"
  # Repository name from GitHub variables
  REPO_NAME: "${{ vars.REPO_NAME }}"
  # Conda environment name (typically matches repo name)
  CONDA_ENV: "${{ vars.REPO_NAME }}"
  # PyPI library name (typically matches repo name)
  PYPI_LIBRARY_NAME: "${{ vars.REPO_NAME }}"
  # A Python import statement used for testing package installation.
  TEST_IMPORT: "${{ vars.TEST_IMPORT_STATEMENT }}"
  ####################################### DEFAULT #########################################

  ############################## DEFINED AS REPOSITORY SECRET #############################
  # PyPI API token for authentication. Sourced from GitHub secrets for security.
  PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: "${{ env.PYTHON_VERSION }}"

    - name: Check-out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install dependencies
      run: |
        conda env create -f environment.yml
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda init bash
        conda activate ${{ env.CONDA_ENV }}

    - name: Install ${{ env.PYPI_LIBRARY_NAME }} library using poetry
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda activate ${{ env.CONDA_ENV }}
        poetry install --with dev

    - name: Build package
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda activate ${{ env.CONDA_ENV }}
        poetry build

    - name: Publish to PyPI
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda activate ${{ env.CONDA_ENV }}
        # Configure poetry to use PyPI API token
        poetry config pypi-token.pypi ${{ env.PYPI_API_TOKEN }}
        # Publish to PyPI
        poetry publish

    - name: Get published version
      id: get_version
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda activate ${{ env.CONDA_ENV }}
        echo "LIB_VERSION=$(poetry version --short)" >> $GITHUB_ENV

    - name: Test installation from PyPI
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda init bash
        conda create --name test_env python=${{ env.PYTHON_VERSION }}
        conda activate test_env
        echo "****** Testing Installation of ${{ env.PYPI_LIBRARY_NAME }}==${{ env.LIB_VERSION }} *****"
        # Wait a bit for PyPI to propagate the new package
        sleep 120
        python -m pip install ${{ env.PYPI_LIBRARY_NAME }}==${{ env.LIB_VERSION }}
        python -c "${{ env.TEST_IMPORT }}"
        if [ $? -eq 0 ]; then
          echo "✅ ${{ env.PYPI_LIBRARY_NAME }} successfully installed from PyPI!"
        else
          echo "❌ ${{ env.PYPI_LIBRARY_NAME }} could not be installed from PyPI."
          exit 1
        fi

    - name: Create success summary
      run: |
        echo "## 🎉 PyPI Publication Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** \`${{ env.PYPI_LIBRARY_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ env.LIB_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**PyPI URL:** https://pypi.org/project/${{ env.PYPI_LIBRARY_NAME }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Install Command:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "pip install ${{ env.PYPI_LIBRARY_NAME }}==${{ env.LIB_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 