name: ci-branch-manual-release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version Number x.y.z, where x, y, and z are integers'
        required: true
      prefix:
        description: 'Version Prefix, in alpha numeric lower case, no spaces, no special characters'
        required: false

permissions:
  # Grants permission to write to the repository contents,
  # including pushing code, managing files, and handling GitHub releases.
  contents: write
  # Allows the workflow to create or update GitHub Pages content,
  # useful for deploying static websites.
  pages: write
  # Enables the workflow to request an
  #id_token (JWT) for the GITHUB_TOKEN, used for OpenID Connect
  # authentication to third-party services.
  id-token: write

concurrency:
  # Defines a concurrency group named. Jobs with the same
  # group name will be managed under this concurrency setting.
  group: "${{ vars.QUAN_PYPI_LIBRARY_NAME }}-${{ github.head_ref }}"
  # If a new job in the "pages" group starts, and a previous
  # job in the same group is still running, the already running job will be canceled if the
  # follow flag is set to true.
  cancel-in-progress: false

env:
  ################################## REPOSITORY SPECIFIC ##################################
  # Specifies the Python version to be used in the workflow.
  PYTHON_VERSION: "3.8"
  # Sets the name of the Conda environment defined in environment.yml.
  CONDA_ENV: "${{ vars.QUAN_CONDA_ENV_NAME }}"
  # Defines the name of the library for PyPI operations.
  PYPI_LIBRARY_NAME: "${{ vars.QUAN_PYPI_LIBRARY_NAME }}"
  # A Python import statement used for testing package installation.
  TEST_IMPORT: "${{ vars.QUAN_TEST_IMPORT_STATEMENT }}"
  ####################################### DEFAULT #########################################

  ############################## DEFINED AS REPOSITORY SECRET #############################
  # URL of the PyPI repository. Sourced from GitHub secrets for security.
  # https://pypy.quandri.io
  PYPI_REPOSITORY_URL: ${{ secrets.PYPI_REPOSITORY_URL }}
  # PyPI username for authentication. Sourced from GitHub secrets.
  PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
  # PyPI password for authentication. Sourced from GitHub secrets.
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  # Twine username for uploading packages. Typically matches the PyPI username.
  TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  # Twine password for uploading packages. Typically matches the PyPI password.
  TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  # URL of the repository where Twine will upload packages.
  TWINE_REPOSITORY_URL: ${{ secrets.PYPI_REPOSITORY_URL }}
  # Setup alternative PyPI repository for poetry
  # https://pypy.quandri.io/simple/
  QUANDRI_PYPI_REPOSITORY_URL: ${{ secrets.PYPI_REPOSITORY_URL }}/simple/


jobs:
  ci-branch-manual-release:
    runs-on: ubuntu-latest

    steps:
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: "${{ env.PYTHON_VERSION }}"

    - name: Check-out repository
      uses: actions/checkout@v4
      with:
        # important to keep it at 0 to get all tags
        fetch-depth: 0
        # remove this line if you don't use git-lfs
        lfs: true

    # remove this job if you don't use git-lfs
    - name: Cache Git LFS objects
      id: cache-lfs
      uses: actions/cache@v4
      with:
        path: .git/lfs
        key: ${{ runner.os }}-git-lfs-${{ hashFiles('.gitattributes') }}
        restore-keys: |
          ${{ runner.os }}-git-lfs-

    # remove this job if you don't use git-lfs
    - name: Pull LFS files if cache miss
      if: steps.cache-lfs.outputs.cache-hit != 'true'
      run: |
        git lfs fetch
        git lfs checkout

    - name: Pre-release identifier discovery
      run: |
        VERSION="${{ github.event.inputs.version }}"
        # default to 0.0.0 if no version is provided
        if [ -z "$VERSION" ]; then
            VERSION="0.0.0"
        fi
        VERSION_PREFIX="${{ github.event.inputs.prefix }}"
        # default to rc if no prefix is provided
        if [ -z "$VERSION_PREFIX" ]; then
            VERSION_PREFIX="rc"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "VERSION_PREFIX=$VERSION_PREFIX" >> $GITHUB_ENV

    - name: Install dependencies (Private and Public PyPI)
      run: |
        conda env create -f environment.yml
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda init bash
        conda activate ${{ env.CONDA_ENV }}
        # setup quandri internal pypi
        poetry config repositories.quandri-pypi ${{ env.QUANDRI_PYPI_REPOSITORY_URL }}
        poetry config http-basic.quandri-pypi ${{ env.PYPI_USERNAME }} ${{ env.PYPI_PASSWORD }}

    - name: Install ${{ env.PYPI_LIBRARY_NAME }} library using poetry
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda activate ${{ env.CONDA_ENV }}
        poetry install

    - name: Applying version and prefix to pyproject.toml
      run: |
        echo "Chaning version to ${{ github.event.inputs.version }} with prefix ${{ github.event.inputs.prefix }}"
        python -m pip install tomlkit
        python -c '
        from tomlkit import dumps, parse

        # Load the current pyproject.toml
        with open("pyproject.toml", "r", encoding="utf-8") as f:
            data = parse(f.read())

        # Get the prefix from pyproject.toml
        PREFIX = "${{ env.VERSION_PREFIX }}"
        if PREFIX.strip():
            PREFIX = "+" + PREFIX
        else:
            PREFIX = "+rc"
        VERSION = "${{ env.VERSION }}"
        if VERSION.strip():
            pass
        else:
            VERSION = "0.0.0"
        # Modify the version with the prefix
        data["tool"]["poetry"]["version"] = VERSION + PREFIX

        # Save the modified pyproject.toml
        with open("pyproject.toml", "w", encoding="utf-8") as f:
            f.write(dumps(data))

        '

    - name: Build package and Publish to Private Pypi
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda init bash
        conda activate ${{ env.CONDA_ENV }}
        # setup quandri internal pypi
        poetry config repositories.quandri-pypi ${{ env.QUANDRI_PYPI_REPOSITORY_URL }}
        poetry config http-basic.quandri-pypi ${{ env.PYPI_USERNAME }} ${{ env.PYPI_PASSWORD }}
        poetry update
        poetry build
        # (source version) pip install ${{ vars.QUAN_PYPI_LIBRARY_NAME }}
        twine upload --verbose ./dist/*${{ env.VERSION_PREFIX }}*.tar.gz
        # (binary version) pip install ${{ vars.QUAN_PYPI_LIBRARY_NAME }} --only-binary :all:
        twine upload --verbose ./dist/*${{ env.VERSION_PREFIX }}*.whl

    - name: Get ${{ env.PYPI_LIBRARY_NAME }} version
      id: get_version
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda init bash
        conda activate ${{ env.CONDA_ENV }}
        echo "LIB_VERSION=$(poetry version --short)" >> $GITHUB_ENV

    - name: Test installation of ${{ env.PYPI_LIBRARY_NAME}}==${{ env.LIB_VERSION }}
      run: |
        echo "Initialize Conda"
        eval "$(conda shell.bash hook)"
        conda init bash
        conda create --name new_env python=${{ env.PYTHON_VERSION }}
        conda activate new_env
        echo "****** Testing Installation of  ${{ env.PYPI_LIBRARY_NAME }}==${{ env.LIB_VERSION }} *****"
        python -m pip install ${{ env.PYPI_LIBRARY_NAME }}==${{ env.LIB_VERSION }} --extra-index-url https://${{ env.PYPI_USERNAME }}:${{ env.PYPI_PASSWORD }}@pypi.quandri.io/simple/
        python -c "${{ env.TEST_IMPORT }}"
        if [ $? -eq 0 ]; then
          echo "${{ env.PYPI_LIBRARY_NAME }} with version ${{ env.LIB_VERSION }} is successfully installed via pip."
        else
          echo "${{ env.PYPI_LIBRARY_NAME }} with version ${{ env.LIB_VERSION }} could not be installed via pip."
          exit 1
        fi
